/*###############################################################
## MODULE: slic.cpp
## VERSION: 1.0 
## SINCE 2013-12-17
## AUTHOR Jimmy Lin (xl5224) - JimmyLin@utexas.edu  
## DESCRIPTION: 
##      
#################################################################
## Edited by MacVim
## Class Info auto-generated by Snippet 
################################################################*/

#include "stdlib.h"
#include "math.h"
#include "cv.h"

/* Structure keeping track of info of the cluster center */
struct centroid 
{
    int x, y;
    double l, a, b;
}

void update_centroid (struct centroid * c, double l, double a, double b, int x, int y)
{
    c->l = l;
    c->a = a;
    c->b = b;
    c->x = x;
    c->y = y;
    return ;
}


int validate (int value, int lower, int upper)
{
    if (value < lower) return lower;
    else if (value >= upper) return upper;
    else return value;
}

/* 
 * INPUT
 *   imgLab: image matrix in EILAB format
 *   k: number of superpixel to generate
 */
void slic (cv::Mat imgLab, const int k) 
{
    const int H = imgLab.rows;
    const int W = imgLab.cols;

    // randomly pick up initial cluster center
    const int S = sqrt(H * W / k);  // grid size
    const int gridPerRow = W / S;
    vector<centroid *> ccs;
    ccs.resize (k, NULL);
    for (int i = 0; i < k; i ++) {
        // randomize the position of centroid
        int x, y;
        double l, a, b;
        gridx = i % gridPerRow;
        gridy = i / gridPerRow;
        x = (rand() % S) + gridx * S;
        y = (rand() % S) + gridy * S;
        // acquire lab color of the derived centroid
        l = imgLab.at<double>(y, x)[0];
        a = imgLab.at<double>(y, x)[1];
        b = imgLab.at<double>(y, x)[2];
        // create centroid object
        ccs[i] = (struct centroid *) malloc (sizeof (struct centroid));
        // update the centroid
        update_centroid (ccs[i], l, a, b, x, y);
    }

    // TODO: move cluster center to the lowest gradient position
     

    // label matrix indicate the cluster number one pixel is in
    cv::Mat label = cv::Mat (H, W, CV_8U, -1);
    // distance matrix represents the distance between one pixel and its
    // centroid
    cv::Mat distance = cv::Mat (H, W, CV_64F, INFINITY);

    while (true) 
    {
        for (int i = 0; i < k; i ++)
        {
            int x = ccs[i]->x;
            int y = ccs[i]->y;
            double l = ccs[i]->l;
            double a = ccs[i]->a;
            double b = ccs[i]->b;

            for (int tmpx = validate(x-S, 0, W); tmpx < validate(x+S, 0, W); tmpx++) 
            {
                double tmpl = imgLab.at<double>(y, x)[0];
                double tmpa = imgLab.at<double>(y, x)[1];
                double tmpb = imgLab.at<double>(y, x)[2];
                double color_distance = sqrt (pow(tmpl - l, 2.0) +
                        pow(tmpa - a, 2.0) + pow(tmpb, 2.0)); 
                double spatial_distance = sqrt (pow(tmpx - x, 2.0) + pow(tmpy - y, 2.0));
                // TODO: to be refined formula
                double D = sqrt (pow(color_distance, 2.0) + pow(spatial_distance / S, 2.0));
                if (D < distance.at<double>(tmpy, tmpx)) {
                    distance.at<double>(tmpy, tmpx) = D;
                    label.at<unsigned>(tmpy, tmpx) = k;
                }

            }

            // TODO: compute new cluster center
            for () {


            }
            // TODO: compute residual error E

        }

        // stop iteration until specified precision is reached
        if (E < threshold) break;
    }
}
